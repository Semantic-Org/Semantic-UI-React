{
  "Provider": {
    "displayName": "Provider",
    "methods": [
      {
        "name": "renderStaticStyles",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderFontFaces",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": [
      {
        "type": "element",
        "required": true,
        "description": [
          ""
        ],
        "tags": [],
        "name": "children"
      },
      {
        "type": "arrayOf",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "value": {
          "name": "shape",
          "value": {
            "name": {
              "name": "string",
              "required": false
            },
            "paths": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "style": {
              "name": "shape",
              "value": {
                "fontStretch": {
                  "name": "string",
                  "required": false
                },
                "fontStyle": {
                  "name": "string",
                  "required": false
                },
                "fontVariant": {
                  "name": "string",
                  "required": false
                },
                "fontWeight": {
                  "name": "union",
                  "value": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "number"
                    }
                  ],
                  "required": false
                },
                "localAlias": {
                  "name": "string",
                  "required": false
                },
                "unicodeRange": {
                  "name": "string",
                  "required": false
                }
              },
              "required": false
            }
          }
        },
        "name": "fontFaces"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "siteVariables"
      },
      {
        "type": "arrayOf",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "value": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "name": "staticStyles"
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/Provider/Provider.js"
  },
  "Layout": {
    "displayName": "Layout",
    "methods": [],
    "props": [
      {
        "type": "any",
        "required": false,
        "description": [
          "How to align cross-axis items within the layout (i.e. vertical or not)."
        ],
        "tags": [],
        "name": "alignItems"
      },
      {
        "type": "string",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "className"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "debug"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          "A layout can render its content directly if only one piece of content exists."
        ],
        "tags": [],
        "name": "disappearing"
      },
      {
        "type": "any",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "end"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "endCSS"
      },
      {
        "type": "string",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "'auto'",
        "tags": [],
        "name": "endSize"
      },
      {
        "type": "string",
        "required": false,
        "description": [
          "A layout can have gaps of whitespace between areas."
        ],
        "tags": [],
        "name": "gap"
      },
      {
        "type": "any",
        "required": false,
        "description": [
          "How to align items on-axis within the layout (i.e. vertical or not)."
        ],
        "tags": [],
        "name": "justifyItems"
      },
      {
        "type": "any",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "main"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "mainCSS"
      },
      {
        "type": "string",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "'1fr'",
        "tags": [],
        "name": "mainSize"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          "A layout can reduce to the minimum required areas."
        ],
        "tags": [],
        "name": "reducing"
      },
      {
        "type": "func",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "function({ end, styles }) {\n  return end && <div className={classNames('layout__end', styles.end)}>{end}</div>\n}",
        "tags": [],
        "name": "renderEndArea"
      },
      {
        "type": "func",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "function({ gap }) {\n  return gap && <span className='layout__gap' />\n}",
        "tags": [],
        "name": "renderGap"
      },
      {
        "type": "func",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "function({ main, styles }) {\n  return main && <div className={classNames('layout__main', styles.main)}>{main}</div>\n}",
        "tags": [],
        "name": "renderMainArea"
      },
      {
        "type": "func",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "function({ start, styles }) {\n  return start && <div className={classNames('layout__start', styles.start)}>{start}</div>\n}",
        "tags": [],
        "name": "renderStartArea"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "rest"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          "Styled applied to the root element of the rendered component."
        ],
        "tags": [],
        "name": "rootCSS"
      },
      {
        "type": "any",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "start"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "startCSS"
      },
      {
        "type": "string",
        "required": false,
        "description": [
          ""
        ],
        "defaultValue": "'auto'",
        "tags": [],
        "name": "startSize"
      },
      {
        "type": "object",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "styles"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "truncateEnd"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "truncateMain"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "truncateStart"
      },
      {
        "type": "bool",
        "required": false,
        "description": [
          ""
        ],
        "tags": [],
        "name": "vertical"
      }
    ],
    "docBlock": {
      "tags": [],
      "description": [
        ""
      ]
    },
    "path": "src/components/Layout/Layout.js"
  }
}